var VerissimoData = {
info : [
'20.1.40',
'eda',
'Tue, 13 Apr 2021 01:29:55 -0700',
'SystemVerilog UVM Compliance Rules Report',
'fifo',
[undefined],
'1',
'false',
'79998',
'2265',
'0',
'0',
'false',
'false',
'false',
'false'
],
categories : [
['Compilation','',[0,1,2]],
['XVM Base Classes','',[3,4,5,6]],
['XVM Architecture','',[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]],
['XVM Factory Registration','',[27,28,29]],
['XVM Factory Override','',[30]],
['XVM Factory Create','',[31,32,33]],
['XVM Constructor','',[34]],
['XVM Build Phase','',[35]],
['XVM Connect Phase','',[36,37,38]],
['XVM Run Phase','',[39,40,41,42,43]],
['XVM Sequences','',[44,45,46,47,48]],
['XVM Checking','',[49,50,51,52,53,54,55,56,57]],
['XVM Coverage','',[58,59,60,61]],
['XVM Messaging','',[62,63,64]],
['XVM Documentation','',[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82]],
['XVM Packaging and Name Space','',[83,84,85,86,87,88,89,90,91,92,93,94,95,96,97]]
],
checks : [
['SYNTACTIC_PROBLEM','Syntactic Problems','This check shows the syntactic problems reported during compilation.\n\nParameters:\nmaxNofHits : [optional] Maximum number of hits to be reported. Use 0 to show all. Default value: 0.\nshow : [optional] Comma separated list of syntactic problem kinds: ERROR, WARNING, INFO, DISABLED. Default value: ERROR.\nshowFailureDetails : [optional] When true, show each syntactic compilation problem, when false, only show that there are problems. Default value: true.\n',0,0,3,[],'SYNTACTIC_PROBLEM',-1,27,0,0],
['SEMANTIC_PROBLEM','Semantic Problems','This check shows the semantic problems reported during compilation.\n\nParameters:\nmaxNofHits : [optional] Maximum number of hits to be reported. Use 0 to show all. Default value: 0.\nshow : [optional] Comma separated list of syntactic problem kinds: ERROR, WARNING, INFO, DISABLED. Default value: ERROR.\nshowFailureDetails : [optional] When true, show each semantic compilation problem, when false, only show that there are problems. Default value: true.\n',0,0,3,[],'SEMANTIC_PROBLEM',-1,1,0,0],
['NON_STANDARD','Non Standard Constructs','This check shows the non-standard constructs reported during compilation.\n\nParameters:\nexcludeIDs : [optional] Comma separated list of excluded non standard check IDs. No default value.\nincludeIDs : [optional] Comma separated list of included non standard check IDs. No default value.\nmaxNofHits : [optional] Maximum number of hits to be reported. Use 0 to show all. Default value: 0.\nshow : [optional] Comma separated list of syntactic problem kinds: ERROR, WARNING, INFO, DISABLED. Default value: ERROR, WARNING, INFO.\nshowFailureDetails : [optional] When true, show each non-standard construct, when false, only show that there are problems. Default value: true.\n',0,0,3,[],'NON_STANDARD',-1,0,0,0],
['UVM9','Base Class','All components implemented must be extended from the corresponding base class or a derivate of it, for example the monitor must be extended from uvm_monitor or its derivative.',0,1,3,[0],'XVM9',0,0,0,0],
['UVM1','Sequence Item Inherits from uvm_sequence_item','Verify that every data item class declaration is extending from uvm_sequence_item or a derivative of uvm_sequence_item.',0,1,3,[],'XVM1',0,0,0,0],
['UVM4','Sequence Inherits from uvm_sequence','The declaration of a sequence or virtual sequence class is derived from uvm_sequence or a derivative of uvm_sequence.',0,1,3,[],'XVM4',0,0,0,0],
['UVM45','Testbench Inherits from uvm_env','The class declaring the testbench is extended from uvm_env.\n\nParameters:\nbaseClass : [optional] Check if all testbenches inherit from \'baseClass\'. Default value: uvm_pkg::uvm_env.\n',0,1,3,[],'XVM45',0,0,0,0],
['ARAF','Agent Has Active Field','Verify that all agents have exactly one field of type uvm_active_passive_enum.',0,2,3,[],'ARAF',0,4,0,0],
['ARAD','Agent Has Driver','Verify that all agents have a driver field. A driver is a class that inherits from uvm_driver.\nException 1: Agents that contain other agents are not required to have a driver field.\nException 2: Virtual agents are skipped.\n\nRelated checks: ARAI, ARMI, ARDI, ARSI, ARAS, UVM28, UVM46, UVM49, UVM51, UVM52, UVM60.\n\nImplementation details:\nFor each agent (skips virtual agents):\n1) Checks that agent has at least a driver or agent field (including inheritance)',0,2,3,[],'ARAA',0,130,0,0],
['ARAS','Agent Has Driver Sequencer','Verify that all agents have a sequencer. A sequencer is a class that inherits from uvm_sequencer.\nException 1: Active agents that contain other agents are not required to have a sequencer field.\nException 2: Virtual agents are skipped.\n\nRelated checks: ARAD, ARAI, ARMI, ARDI, ARSI, UVM28, UVM46, UVM49, UVM51, UVM52, UVM60.\n\nImplementation details:\nFor each agent (skips virtual agents):\n1) Checks that agent has at least a driver sequencer or agent field (including inheritance)',0,2,3,[],'ARSAb',0,1,0,0],
['UVM22a','Monitor Has Covergroups','The monitor class should at least include one covergroup and one coverpoint statement.',0,2,3,[1,2,3],'XVM22a',0,0,0,0],
['UVM22b','Monitor\'s Covergroups Instantiation','The monitor covergroups must be constructed in the new() method.',0,2,3,[],'XVM22b',0,0,0,0],
['UVM23a','Monitor Has Analysis Ports','To properly connect to a scoreboard, uvm_analysis_ports should be implemented inside a monitor class.\n\nException: Virtual monitors are not checked.',0,2,3,[4],'XVM23a',0,208,0,0],
['UVM23b','Monitor\'s Analysis Ports Instantiation','Monitor\'s uvm_analysis_ports are constructed in the new() constructor or in the build phase function.',0,2,3,[],'XVM23b',0,2,0,0],
['ARAI','Agent Instantiation','Verify that all agents are properly instantiated in envs or agents (or tests iff allowInstantiationInTest is set).\nProperly instantiated means that they should be created using class_name::type_id::create() method inside the build phase. See the example in rule UVM51.\n\nRelated checks: ARAD, ARMI, ARDI, ARSI, ARAS, UVM28, UVM46, UVM49, UVM51, UVM52, UVM60.\n\nImplementation details:\nFor each agent (skips virtual agents):\n1) Checks that there is at least one create() call for the agent. The create() call is \"agent type\"::type_id::create().\n2) Checks that the create() call:\n - is inside an env or agent\n - is inside build phase\n - is assigned to a field\n\nParameters:\nallowBaseClassInstantiation : [optional] When true, it passes if a parent agent is properly instantiated. Default value: false.\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\nallowInstantiationInBaseClasses : [optional] Comma separated list of additional base classes that allow create calls. No default value.\nallowInstantiationInTest : [optional] When true, an agent can be instantiated in a test. Default value: false.\n',0,2,3,[],'ARIN',0,754,0,0],
['ARMI','Monitor Instantiation','Verify that all monitors are properly instantiated in envs or agents.\nProperly instantiated means that they should be created using class_name::type_id::create() method inside the build phase. See the example in rule UVM51.\n\nRelated checks: ARAD, ARAI, ARDI, ARSI, ARAS, UVM28, UVM46, UVM49, UVM51, UVM52, UVM60.\n\nImplementation details:\nFor each monitor (skips virtual monitors):\n1) Checks that there is at least one create() call for the monitor. The create() call is \"monitor type\"::type_id::create().\n2) Checks that the create() call:\n - is inside an env or agent\n - is inside build phase\n - is assigned to a field\n\nParameters:\nallowBaseClassInstantiation : [optional] When true, it passes if a parent monitor is properly instantiated. Default value: false.\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\nallowInstantiationInBaseClasses : [optional] Comma separated list of additional base classes that allow create calls. No default value.\n',0,2,3,[5],'ARMN',0,0,0,0],
['ARDI','Driver Instantiation','Verify that all drivers are properly instantiated in agents (or envs iff allowInstantiationInEnv is set).\nProperly instantiated means that they should be created using class_name::type_id::create() method inside the build phase. See the example in rule UVM51.\n\nRelated checks: ARAD, ARAI, ARDI, ARSI, ARAS, UVM28, UVM46, UVM49, UVM51, UVM52, UVM60.\n\nImplementation details:\nFor each driver (skips virtual drivers):\n1) Checks that there is at least one create() call for the driver. The create() call is \"driver type\"::type_id::create().\n2) Checks that the create() call:\n - is inside an env or agent\n - is inside build phase\n - is assigned to a field\n - is guarded by an \"if(get_is_active())\" or \"if(get_is_active() == UVM_ACTIVE)\" or \"if(UVM_ACTIVE == get_is_active())\" or \"if(<expr of active_passive_enum type>)\n\nUnlike UVM28, this rule checks that each driver is properly instantiated. You should use both of them to be on the safe side, even if there is some redundancy.\n\nParameters:\nallowBaseClassInstantiation : [optional] When true, it passes if a parent driver is properly instantiated. Default value: false.\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\nallowInstantiationInBaseClasses : [optional] Comma separated list of additional base classes that allow create calls. No default value.\nallowInstantiationInEnv : [optional] When true, a driver can be instantiated in an env. Is active is not checked. Default value: false.\n',0,2,3,[],'ARBF',0,0,0,0],
['ARSI','Driver Sequencer Instantiation','Verify that all sequencers are properly instantiated in agents (or envs iff allowInstantiationInEnv is set).\nProperly instantiated means that they should be created using class_name::type_id::create() method inside the build phase. See the example in rule UVM51.\n\nRelated checks: ARAD, ARAI, ARDI, ARSI, ARAS, UVM28, UVM46, UVM49, UVM51, UVM52, UVM60.\n\nImplementation details:\nFor each driver sequencer (skips virtual driver sequencers, virtual as in virtual class, do not confuse with virtual sequencers):\n1) Checks that there is at least one create() call for the sequencer. The create() call is \"sequencer type\"::type_id::create().\n2) Checks that the create() call:\n - is inside an env or agent\n - is inside build phase\n - is assigned to a field\n - is guarded by an \"if(get_is_active())\" or \"if(get_is_active() == UVM_ACTIVE)\" or \"if(UVM_ACTIVE == get_is_active())\" or \"if(<expr of active_passive_enum type>)\n\nUnlike UVM28, this rule checks that each driver sequencer is properly instantiated. You should use both of them to be on the safe side, even if there is some redundancy.\n\nParameters:\nallowBaseClassInstantiation : [optional] When true, it passes if a parent sequencer is properly instantiated. Default value: false.\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\nallowInstantiationInBaseClasses : [optional] Comma separated list of additional base classes that allow create calls. No default value.\nallowInstantiationInEnv : [optional] When true, a sequencer can be instantiated in an env. Is active is not checked. Default value: false.\n',0,2,3,[],'ARSAa',0,0,0,0],
['UVM28','Conditional Driver and Sequencer Instantiation in Agent','In every agent check the existence of conditional code using a variable of type uvm_active_passive_enum, \nand verify the correct component creation\/instantiation for driver and sequencer only if the configuration is active.\n\nNote: Properly instantiated means that they should be created using class_name::type_id::create() method inside the build phase function. Please see the example in rule UVM51.\n\nRelated checks: ARAD, ARAI, ARMI, ARDI, ARSI, ARAS, UVM51, UVM52, UVM60.\n\nImplementation details:\nFor each agent (skips virtual agents):\nFor each driver or sequencer field (excluding inheritance, skips fields of virtual type):\n1) Checks that there are create() calls inside the build phase function. The create() calls are field_type::type_id::create(). Other types that inherit from field_type may be used.\nFor each create() call:\n2) Checks that the call is assigned to the field.\n3) Checks that the call is guarded by an \"if(get_is_active())\" or \"if(get_is_active() == UVM_ACTIVE)\" or \"if(UVM_ACTIVE == get_is_active())\" or \"if(<expr of active_passive_enum type>)\"\n\n Unlike ARDI and ARSI, this rule checks that each agent properly instantiates a driver and a sequencer. You should use all of them to be on the safe side, even if there is some redundancy.\n\nParameters:\nallowCastOnComponent : [optional] When true, casting the result of the create() call is accepted: $cast(m_comp, create_component(...)). Default value: false.\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\n',0,2,3,[],'XVM28',0,1,0,0],
['UVM46','Testbench Instantiates environment','The testbench class instantiates one or more envs.\nException: Virtual testbenches are skipped.\nRelated checks: ARAD, ARAI, ARMI, ARDI, ARSI, ARAS, UVM28, UVM49, UVM51, UVM52, UVM60.\n\nNote: Properly instantiated means that they should be created using class_name::type_id::create() method inside the build phase.\nSee the example in rule UVM51.\n\nParameters:\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\n',0,2,3,[],'XVM46',0,0,0,0],
['UVM49','Test Instantiates Testbench','The test class must instantiate the testbench(sve).\nException: Virtual tests are skipped.\nRelated checks: ARAD, ARAI, ARMI, ARDI, ARSI, ARAS, UVM28, UVM49, UVM51, UVM52, UVM60.\n\nNote: Properly instantiated means that they should be created using class_name::type_id::create() method inside the build phase.\nSee the example in rule UVM51.\n\nParameters:\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\n',0,2,3,[],'XVM49',0,0,0,0],
['ARIO','Active and Reactive Components','Interface OVC should be complete and include both the \"active\" and \"reactive\" components.For example the same UVC should be able to emulate both master and slave.\nIf due to time pressure some logic is not implemented, it is encouraged to create empty sub-components for the missing logic and document it.\nWe identify \"active\" (e.g. master) and \"reactive\" (e.g. slave) agents based on some patterns in their names.\n\nImplementation details:\nYou can tune the patterns, for example to include tx for \"active\" and rx for \"reactive\" agents.\nYou need to have in your package at least one from each active\/reactive x agent\/driver\/sequencer\/monitor.',0,2,3,[6,7,8,9,10,11,12,13],'ARIO',0,1,0,0],
['UVM50','Monitor begin_tr, end_tr','In every monitor check the usage of begin_tr, end_tr.',0,2,3,[14,15,16],'XVM50',0,192,0,0],
['UVM16','Mandatory Virtual Interface in Drivers and Monitors','Driver and monitor classes must contain a virtual interface declaration. Virtual drivers or monitors are not checked.',0,2,3,[],'XVM16',0,2,0,0],
['UVM57','Access to DUT Signals','All signals used by a monitor or a driver (or sometimes by a sequencer) should come from a virtual interface and not directly from the DUT.\nImplementation Notes:\nThis rule checks that no class uses module signals.\n\nParameters:\nallowInterfaceConfig : [optional] Allows module access to an interface instance or modport to be passed as argument to uvm_config_db#(type T)::set() function. Default value: false.\n',0,2,3,[],'XVM57',0,30,0,0],
['ARBS','Only Driver Drives Signals','Verify that all DUT signals are driven only by drivers. No DUT signals should be driven by components that are not derived from uvm_driver.',0,2,0,[],'MANUAL',0,0,0,1],
['ARMP','Monitors Are Passive','The monitors are passive sub-components that should never drive DUT signals  ',0,2,0,[],'MANUAL',0,0,0,1],
['UVM2','Recommended use of the factory registration macros','For the declaration of monitor, sequencer, driver, agent, environment, test and data items, check respectively the existence and consistency of:\n\n `uvm_component_utils (<class name declaration>) for classes derived from uvm_component\n `uvm_component_utils (<class name declaration>) for sequencers\n `uvm_object_utils (<class name declaration>, <sequencer name>) for sequences\n `uvm_object_utils (<class name declaration>) for classes sequence items\n\nFor parameterized classes `uvm_*_param_utils or `uvm_*_param_utils_begin should be used.\n\nIf `uvm_(object or component)_utils_begin macro is used the existence of `uvm_(object or component)_utils_end must be checked.\n\nIf the pair of _begin _end is satisfied, between the two macro call the `uvm_field_<type> (<variable or instance name match>, <UVM_FLAG>) may (but not necessarily) exist.Refer to UVM reference manual for all supported types, with particular attention to the enum type which requires the extra field for the enum type name, and the UVM_FLAG.\n\nException: Virtual classes are not checked. ',0,3,3,[17],'XVM2',0,6,0,0],
['UVM5','Sequence Factory Registration','Verify that sequence declaration contains proper usage of the `uvm_object_utils macro: `uvm_object_utils(seq_type, sequencer_type) or `uvm_object_begin() ... `uvm_object_utils_end.\n\nException: Virtual sequences are not checked.',0,3,3,[],'XVM5',0,0,0,0],
['UVM10','Sequencer Factory Registration','For sequencer or virtual sequencer declaration, check the existence and consistence of `uvm_component_utils (<class name declaration>).\n\nFor parameterized classes `uvm_component_param_utils or `uvm_component_param_utils_begin should be used.\n\nIf `uvm_component_utils_begin macro is used the existence of `uvm_component_utils_end must be checked.\n\nIf the pair of _begin _end is satisfied, check that between the two macro calls the `uvm_field_<type> (<variable or instance name match>, <UVM_FLAG>) may optionally exist.',0,3,3,[],'XVM10',0,1,0,0],
['UVM53','Illustrate configuration using set_config_*() and\/or uvm_config_db#()::set() in case of UVM','Inside the build phase of a test class, at least one set_config_*() or  uvm_config_db#()::set() must be used in order to demonstrate the VC configuration capability.\nNote: The linter only checks the build() method of the class, it does not verify the build phase method in super classes.',0,4,3,[18,19],'XVM53',0,0,0,0],
['UVM51','Create components in the build phase','All VC components such as driver, monitor, sequencer, agent, env, etc. must be created using the create call inside the build phase method.\n\nRelated checks: ARAD, ARAI, ARMI, ARDI, ARSI, ARAS, UVM28, UVM46, UVM49, UVM60.\n\nExample:\nclass xbus_master_agent extends uvm_agent;\n  xbus_master_driver driver;\n  xbus_master_sequencer sequencer;\n  xbus_master_monitor monitor;\n  ...\n  function void build_phase();\n    super.build_phase();\n    monitor = xbus_master_monitor::type_id::create(\"monitor\", this);\n    if(get_is_active() == UVM_ACTIVE) begin \/\/ or if(is_active ==... \n      sequencer = xbus_master_sequencer::type_id::create(\"sequencer\", this);\n      driver = xbus_master_driver::type_id::create(\"driver\", this);\n    end\n    ...\n  endfunction : build_phase\nendclass\n\nImplementation details:\n0) First it checks that you have at least a component in each category.\nFor each \"uvm container\" (e.g. agent, skips virtual components):\nFor each field that can be \"uvm contained\" (e.g. driver can be contained in agent) (excluding inheritance, skips fields of virtual type):\n1) Checks that there is at least one create() call inside the build phase. The create() call is \"field_type::type_id::create()\". Other types that inherit from field_type may be used.\n2) Checks that this call is assigned to the field.\n\nParameters:\nallowCastOnComponent : [optional] When true, casting the result of the create() call is accepted: $cast(m_comp, create_component(...)). Default value: false.\nallowIndirectCallInstantiation : [optional] When true, the create call is allowed in a function called from the build phase. Default value: false.\n',0,5,3,[],'XVM51',0,25,0,0],
['UVM52','Allocate with create()','All uvm_objects are allocated with create().\n\nImplementation details:\nUse \"type\"::type_id::create() to create an uvm_object when assigning it to a field. Using the class constructor will result in a failure.\n$cast(type, create_component(...)...) will also be considered a failure.\n\nParameters:\nskipBaseClasses : [optional] Comma separated list of base classes full names to be skipped while looking for uvm_object allocations. No default value.\n',0,5,3,[20,21,22,23,24,25,26,27],'XVM52',0,599,0,0],
['UVM60','Component Creation','Component creation - check that all components should be created using the UVM 2.0 creation style. A warning should be generated if old style is used. Related checks: ARAD, ARAI, ARMI, ARDI, ARSI, ARAS, UVM28, UVM46, UVM49, UVM51.\n\nNote: Components should be created using class_name::type_id::create() method inside the build() function. Please see the example in rule UVM51.\n\nCheck supports pre-waiving.',0,5,3,[],'XVM60',0,0,0,0],
['UVM3','Mandatory constructor calling super.new()','Verify the existence of the new() constructor for all classes extended from uvm_*, like uvm_sequence_item, uvm_test, uvm_env, uvm_driver, etc.\nThe constructor must call super.new().',0,6,3,[],'XVM3',0,1,0,0],
['UVM58','Mandatory super.build phase call','The build phase method must call super.build phase.',0,7,3,[],'XVM58',0,3,0,0],
['UVM30a','Agent Connect Phase','In every agent check the existence of the connect phase method and inside it the existence of conditional code using a field or method call of type uvm_active_passive_enum.',0,8,3,[28],'XVM30a',0,19,0,0],
['UVM30b','Agent Connect Phase - Virtual Interface Connection','In every agent, if conditional code is used verify the correct connection of virtual interface for monitor and driver, \nand optionally even for sequencer (rare, but sometime used).\n\nThis check will pass iff:\n1) there is a virtual interface field in the agent (e.g. xsi)\n2) there is an assignment to the corresponding driver\/monitor field\nFor example:\nclass xbus_slave_agent extends uvm_agent;\n...\n  virtual xbus_if xsi;\/\/ need this\n...\n  function void connect();\/\/ need this\n    monitor.xsi = xsi; \/\/ need this\n    if(is_active == UVM_ACTIVE) begin \/\/ need this\n      driver.seq_item_port.connect(sequencer.seq_item_export);\n      sequencer.addr_ph_port.connect(monitor.addr_ph_imp);\n      driver.xsi = xsi; \/\/ need this\n    end\n  endfunction\n...',0,8,3,[29,30],'XVM30b',0,50,0,0],
['UVM59','TLM Connects','TLM connects must occur in the connect phase.',0,8,3,[],'XVM59',0,117,0,0],
['UVM15a','Mandatory Driver Run Phase','Inside a driver the run phase method must exist.',0,9,3,[31],'XVM15a',0,0,0,0],
['UVM15b','Mandatory get_next_item(), item_done() calls in Driver Run Phase','Inside the run phase method of a driver get_next_item() and item_done() should be called.',0,9,3,[],'XVM15b',0,0,0,0],
['UVM15c','Mandatory accept_tr(), start_tr() and end_tr() calls in Driver Run Phase','Inside the run phase method of a driver accept_tr(), start_tr and end_tr() should be called.\n\nException: Virtual drivers are not checked.',0,9,3,[32],'XVM15c',0,0,0,0],
['UVM20','Mandatory Monitor Run Phase','Inside a monitor class the run phase method must exist.\n\nParameters:\npassIfParentHasRunPhase : [optional] When true, if the monitor class doesn\'t directly inherit from uvm_monitor and the parent implements run_phase(), the rule shall pass. Default value: false.\n',0,9,3,[33,34,35],'XVM20',0,0,0,0],
['UVM55','Mandatory fork join in run phase for drivers and monitors','The overridden run phase, declared in a monitor or a driver class, must contains task calls between fork and join\/join_none.',0,9,3,[],'XVM55',0,0,0,0],
['UVM6','Sequence.body()','Verify the existence of the body() method in the code of a sequence.\n\nException: Virtual sequences are not checked.',0,10,3,[],'XVM6',0,0,0,0],
['UVM7','`uvm_do','Check inside the body() the usage of `uvm_do or `uvm_do_with macros or any \"sub do\" macro, like `uvm_create. See the UVM reference manual for all sub-macro definitions.',0,10,3,[],'XVM7',0,0,0,0],
['UVM8','pre_body(), post_body()','If the methods pre_body() and post_body() are implemented on a sequence, they must include respectively the super.pre_body() and super.post_body().\n\nException: Virtual sequences are not checked.',0,10,3,[],'XVM8',0,0,0,0],
['SQSD','Sub-sequencers in Virtual Sequencers','Verify that all virtual sequencers have sub-sequencers. Sub-sequencers are associated with the virtual sequencer by declaring the sub-sequencer fields in the declaration of the virtual sequencer and then performing the assignment in the connect phase of a parent component, which also created the virtual sequencer.',0,10,3,[],'SQSD',0,0,0,0],
['SQEI','Error Injection','Verify that the sequence items provide sufficient ability to inject errors into the generated data stream(s).',0,10,0,[],'MANUAL',0,0,0,1],
['CHCAa','Declarative Protocol Assertions in Interfaces','Declarative protocol assertions should be placed within the SystemVerilog interfaces.',0,11,3,[],'CHCAa',0,1,0,0],
['CHCAb','Declarative Protocol Assertions Enabling','Should be able to control the enabling\/disabling for declarative protocol assertions using the standard checking configuration attributes.\n\nImplementation Notes:\nThis rule verifies the existence of a \'disable iff\' construct.',0,11,3,[],'CHCAb',0,0,0,0],
['UVM36','Interface Protocol Checking','In the interface declaration at least one protocol checking assertion should be implemented.',0,11,3,[36],'XVM36',0,30,0,0],
['CHEX','All checks should be named','Verify that all checks are named.\n\nImplementation Notes:\nOnly concurrent asserts (assert property) and expects are checked to be named.',0,11,3,[],'CHEX',0,0,0,0],
['CHSC','Scoreboard Support','Verify that the package contains a class that inherits from uvm_scoreboard.',0,11,3,[],'CHSC',0,0,0,0],
['UVM56CHEN','Can Disable Checks','In interface declaration and monitor class, assertions should be inside a conditional block',0,11,0,[],'MANUAL',0,0,0,1],
['CHPC','Protocol Checking Completeness','Verify that the package provides sufficient DUT checking (for example, protocol checkers) to cover all possible DUT errors.',0,11,0,[],'MANUAL',0,0,0,1],
['CHEM','Error Messages Quality','Verify that all error messages provide sufficient detail for the user to identify the area and instance of the package\/DUT that produced the error.',0,11,0,[],'MANUAL',0,0,0,1],
['CHED','Error Messages Documentation','Verify that all checks (both for DUT errors and user errors) are sufficiently documented. Every check must have a name\/tag and the documentation must list and describe all of them.',0,11,0,[],'MANUAL',0,0,0,1],
['CVED','Disabling Coverage',' This check verifies that coverage collection by calling the sample method of the covergroup or by trigerring the covergroup event is done in a conditional block.\n\nCheck supports pre-waiving.',0,12,3,[],'CVED',0,24,0,0],
['UVM56CVEN','Can Disable Coverage','In interface declaration and monitor class, the collection of coverage should be inside a conditional block',0,12,0,[],'MANUAL',0,0,0,1],
['CVRS','Coverage Report','Verify that the coverage report produced after testing this OVC is included in the package. Preferred approach: Supply the coverage result files and a shell script called \"show_cover.sh\", all in a directory called \"coverage\". Alternative approach: provide an ASCII coverage report.',0,12,0,[],'MANUAL',0,0,0,1],
['CVPL','Verification Plan','Verify that there is vPlan provided with the OVC.',0,12,0,[],'MANUAL',0,0,0,1],
['CVVN','Always use UVM_NONE verbosity for uvm_report_fatal(), uvm_report_error() and uvm_report_warning()','Always use verbosity UVM_NONE for uvm_report_fatal(), uvm_report_error() and uvm_report_warning(). This ensures that bugs are not being overlooked due to command-line verbosity changes.',0,13,3,[],'CVVN',0,6,0,0],
['MSUA','Use Print() for Printing','It is recommended to use the field macro automation for class printing (print() and sprint()). This allows environment integrators to quickly read and understand log files of OVCs coming from different resources.If a user decides to manually implement the print() and sprint(). it is recommended to produce a similar output to what the automated print method introduce.',0,13,3,[],'MSUA',0,2,0,0],
['MSUM','Conditional Printing','For performance reasons, it is recommended to conditionally execute printing informational messages when data items are being printed.',0,13,3,[37,38,39],'MSUM',0,25,0,0],
['DCDC','Docs Directory Contents','Verify that documentation files exist in the \"docs\" directory. Check the docs directory for .txt, .doc, .pdf, .fm, .html, .htm.\n\nParameters:\ndocumentationDirectory : [optional] Specify the directory path, relative to the current project, for the location of the documentation files. Default value: docs.\nfileExtensions : [optional] Comma separated list of valid file extensions. Default value: .txt, .doc, .pdf, .fm, .html, .htm, .TXT, .DOC, .PDF, .FM, .HTML, .HTM.\n',0,14,3,[40],'DCDC',0,1,0,0],
['DCRN','Release Notes','Verify that release notes are provided in the \"docs\" directory. Check the existence of RELEASE_NOTES.TXT, release_notes.txt or release-notes.txt.',0,14,3,[41],'DCRN',0,0,0,0],
['DCBF','Driver','Verify that all drivers are documented (API and behavior).',0,14,0,[],'MANUAL',0,0,0,1],
['DCCF','Constraints','Verify that the documentation describes all the knobs (user-constrain-able fields) and indicates what their default values are.',0,14,0,[],'MANUAL',0,0,0,1],
['DCUF','Applicable Fields','Verify that the documentation describes all the fields that users may use to control the knobs.',0,14,0,[],'MANUAL',0,0,0,1],
['DCEX','Examples','Verify that the documentation gives sufficient examples to cover the most likely user scenarios.',0,14,0,[],'MANUAL',0,0,0,1],
['DCFC','Features and Controls','Verify that the documentation covers all features and controls of the OVC.',0,14,0,[],'MANUAL',0,0,0,1],
['DCID','Installation and Demo','Verify that the documentation describes the installation and demo processes',0,14,0,[],'MANUAL',0,0,0,1],
['DCPA','Package Architecture','Verify that the documentation describes the architecture of the package and give an overview of its intended use.',0,14,0,[],'MANUAL',0,0,0,1],
['DCPR','Quality','Verify that concepts are introduced before being referred to.',0,14,0,[],'MANUAL',0,0,0,1],
['DCRP','Good\/Bad Practice Notes','Verify that the documentation clearly differentiates between what is good and bad practice when using the package',0,14,0,[],'MANUAL',0,0,0,1],
['DCRS','Reset','Verify that the documentation explains whether the package manages multiple resets during the test.',0,14,0,[],'MANUAL',0,0,0,1],
['DCSD','Sequencer','Verify that all sequencer test interfaces are sufficiently documented.',0,14,0,[],'MANUAL',0,0,0,1],
['DCSP','Support Policies','Verify that the documentation clearly defines the support polices for the package and indicate contact information for obtaining support.',0,14,0,[],'MANUAL',0,0,0,1],
['DCST','Diagrams','Verify that diagrams are provided to explain the structure of the OVC, typical environments and configurations, how to use scoreboarding, the class diagram of the main entities.',0,14,0,[],'MANUAL',0,0,0,1],
['GDNF','What\'s New?','Verify that new functionality added since previous release is properly documented in the release notes.',0,14,0,[],'MANUAL',0,0,0,1],
['GDNM','OVC Name','Verify that the OVC name in the user manual and the package are consistent.',0,14,0,[],'MANUAL',0,0,0,1],
['GDPN','Protocol Name and Version','Verify that the name and version number of protocol or architecture the OVC models is consistent.',0,14,0,[],'MANUAL',0,0,0,1],
['PKLD','Legal Directory Name','Verify that the package directory is named consistently with the package name.\n\nImplementation details:\nAssuming a package test_pkg is defined in test_pkg.sv (the file name is irrelevant for this check):\n- ...\/test_pkg\/test_pkg.sv \/\/ LEGAL\n- ...\/test\/test_pkg.sv \/\/ LEGAL, _pkg is stripped \n- ...\/test_pkg\/sv\/test_pkg.sv \/\/ LEGAL, one sub-folder is allowed for \'sv\' or \'src\' \n- ...\/test_pkg\/sv\/test_pkg.sv \/\/ LEGAL, _pkg is stripped and subfolder is legal \n- ...\/test_pkg\/blabla\/test_pkg.sv \/\/ LEGAL, _pkg is stripped and subfolder is legal \n- ...\/bla\/test_pkg.sv \/\/ ILLEGAL\n- ...\/bla\/sv\/test_pkg.sv \/\/ ILLEGAL',0,15,3,[],'PKLD',0,0,0,0],
['PKVD','Valid Directory Structure','Verify that the package\'s directory is structured correctly (i.e. contains the example and docs directories and the source directory sv\/e\/sc)',0,15,3,[42,43,44],'PKVD',0,0,0,0],
['PKFN','Valid File Names','Verify that all source code files in a package have a name that starts with the package name.',0,15,3,[45],'PKFN',0,2,0,0],
['PKVR','Valid README File','Verify that there is a legal PACKAGE_README.txt file at the top level of the package.',0,15,3,[46],'PKVR',0,0,0,0],
['PKTP','Top and Package Files ','Verify that the OVC has both a top level source file and a top level package file in the language specific subdirectory (e.g. \/sv).\nThe top-level package file of the OVC is named <package>_pkg.sv. Check that this file has the package definition which allows using this OVC as a package. Check that this file has only `include and define statements, and it has or includes the version definition. If the source files are structures in several sub-directories, each sub-directory should have a similar header file, prefixed by the name of the sub-directory.',0,15,0,[],'MANUAL',0,0,0,1],
['PKIM','Include Statements','Verify that all include\/import statements refer to included files using local or package-relative path. No include statements should assume absolute path or path to another package outside the scope of this package. ',0,15,0,[],'MANUAL',0,0,0,1],
['PKDR','Demo Script Running','Verify that the package contains a demo.sh file to demonstrate the package, located at the top level of the package. Verify that the demo is running OK. Check log file results for errors and compare to expected result if available.',0,15,0,[],'MANUAL',0,0,0,1],
['PKER','Examples Documented','Verify that there is an EXAMPLES_README.txt file in the examples directory detailing the contents of the directory. Verify that all the test files are mentioned in the readme file.',0,15,0,[],'MANUAL',0,0,0,1],
['PKCT','Configuration Example','Verify that there is a testbench example in the examples directory that shows how to instantiate and exercise the OVC.',0,15,0,[],'MANUAL',0,0,0,1],
['PKVN','Version Number','Verify that the version number in the PACKAGE_README.txt file matches the version number in the top file.',0,15,0,[],'MANUAL',0,0,0,1],
['PKSS','Simulator Support','Verify that the simulators supported by the demo are documented in the PACKAGE_README.txt file.',0,15,0,[],'MANUAL',0,0,0,1],
['PKSD','Simulator Support Documented','Verify that the simulators supported by the package are documented in the package documentation.',0,15,0,[],'MANUAL',0,0,0,1],
['PKGE','Global Extends','Verify that the package contains no code outside the package scope that may conflict with user code.',0,15,0,[],'MANUAL',0,0,0,1],
['PKCL','Loading and Running with Golden OVC','Verify that the verification component can run properly with the golden OVCs (e.g. xbus) loaded. No errors, name conflicts, etc.',0,15,0,[],'MANUAL',0,0,0,1],
['PKDF','Valid Distribution Format','Verify that the package is distributed according to UVM recommendations, as a compressed tar file with the name including the package name and the version number: <package>_version_<version>.tar.gz ',0,15,0,[],'MANUAL',0,0,0,1]
],
files : [
['\/home\/eda\/Documents\/fifo\/fifo_rst_mon.sv', []],
['\/home\/eda\/Documents\/fifo\/in_monitor.sv', []],
['\/home\/eda\/Documents\/fifo\/out_monitor.sv', []],
['none', []],
['\/home\/eda\/Documents\/fifo\/base_test.sv', []],
['\/home\/eda\/Documents\/fifo\/my_case0.sv', []],
['\/home\/eda\/Documents\/fifo\/my_env.sv', []],
['\/home\/eda\/Documents\/fifo\/my_model.sv', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/snps_uvm_reg_bank.svh', []],
['\/home\/eda\/Documents\/fifo\/o_agt.sv', []],
['\/home\/eda\/Documents\/fifo\/i_agt.sv', []],
['\/home\/eda\/Documents\/fifo\/my_driver.sv', []],
['\/home\/eda\/Documents\/fifo\/my_if.sv', []],
['\/home\/eda\/Documents\/fifo', []]
],
all_files : [
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_version_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_global_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_message_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_phase_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_object_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_printer_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_tlm_imps.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_tlm_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_sequence_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_callback_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_reg_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/macros\/uvm_deprecated_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/uvm_macros.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dpi\/uvm_hdl.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dpi\/uvm_svcmd_dpi.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dpi\/uvm_regex.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dpi\/uvm_dpi.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_coreservice.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_version.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_object_globals.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_misc.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_object.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_pool.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_queue.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_factory.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_registry.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_spell_chkr.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_resource.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_resource_specializations.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_resource_db.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_config_db.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_printer.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_comparer.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_packer.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_links.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_tr_database.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_tr_stream.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_recorder.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_event_callback.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_event.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_barrier.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_callback.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_report_message.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_report_catcher.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_report_server.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_report_handler.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_report_object.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_transaction.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_phase.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_domain.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_bottomup_phase.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_topdown_phase.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_task_phase.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_common_phases.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_runtime_phases.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_root.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_component.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_objection.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_heartbeat.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_globals.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_cmdline_processor.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_traversal.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dap\/uvm_set_get_dap_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dap\/uvm_simple_lock_dap.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dap\/uvm_get_to_lock_dap.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dap\/uvm_set_before_get_dap.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/dap\/uvm_dap.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_tlm_ifs.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_sqr_ifs.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/base\/uvm_port_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_imps.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_ports.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_exports.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_analysis_port.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_tlm_fifo_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_tlm_fifos.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_tlm_req_rsp.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_sqr_connections.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm1\/uvm_tlm.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_pair.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_policies.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_in_order_comparator.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_algorithmic_comparator.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_random_stimulus.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_subscriber.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_monitor.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_driver.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_push_driver.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_scoreboard.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_agent.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_env.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_test.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/comps\/uvm_comps.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequence_item.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequencer_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequencer_analysis_fifo.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequencer_param_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequencer.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_push_sequencer.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequence_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequence.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequence_library.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_sequence_builtin.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/seq\/uvm_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_defines.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_time.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_generic_payload.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_ifs.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_imps.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_ports.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_exports.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_sockets_base.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2_sockets.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/tlm2\/uvm_tlm2.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_item.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_adapter.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_predictor.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_sequence.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_cbs.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_backdoor.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_field.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_vreg_field.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_indirect.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_fifo.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_file.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_mem_mam.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_vreg.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_mem.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_map.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_block.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_reg_hw_reset_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_reg_bit_bash_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_mem_walk_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_mem_access_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_reg_access_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_reg_mem_shared_access_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_reg_mem_built_in_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/sequences\/uvm_reg_mem_hdl_paths_seq.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/snps_uvm_reg_bank.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/reg\/uvm_reg_model.svh', []],
['\/tools\/synopsys\/vcs-mx\/vcs-mx\/O-2018.09-SP2\/etc\/uvm-1.2\/src\/uvm_pkg.sv', []],
['\/home\/eda\/Documents\/fifo\/my_if.sv', []],
['\/home\/eda\/Documents\/fifo\/my_transaction.sv', []],
['\/home\/eda\/Documents\/fifo\/my_driver.sv', []],
['\/home\/eda\/Documents\/fifo\/in_monitor.sv', []],
['\/home\/eda\/Documents\/fifo\/out_monitor.sv', []],
['\/home\/eda\/Documents\/fifo\/my_sequencer.sv', []],
['\/home\/eda\/Documents\/fifo\/i_agt.sv', []],
['\/home\/eda\/Documents\/fifo\/o_agt.sv', []],
['\/home\/eda\/Documents\/fifo\/my_model.sv', []],
['\/home\/eda\/Documents\/fifo\/my_scoreboard.sv', []],
['\/home\/eda\/Documents\/fifo\/my_env.sv', []],
['\/home\/eda\/Documents\/fifo\/base_test.sv', []],
['\/home\/eda\/Documents\/fifo\/my_case0.sv', []],
['\/home\/eda\/Documents\/fifo\/my_case1.sv', []],
['\/home\/eda\/Documents\/fifo\/fifo_chk_rst.sv', []],
['\/home\/eda\/Documents\/fifo\/fifo_rst_mon.sv', []],
['\/home\/eda\/Documents\/fifo\/top_tb.sv', []],
['\/home\/eda\/Documents\/fifo\/asyn_fifo.v', []],
['\/home\/eda\/Documents\/fifo\/fifomem.v', []],
['\/home\/eda\/Documents\/fifo\/rptr_empty.v', []],
['\/home\/eda\/Documents\/fifo\/simv.cst\/testcases\/extracted_r_2_p_1_inconsistent_constraints.sv', []],
['\/home\/eda\/Documents\/fifo\/simv.cst\/testcases\/extracted_r_3_p_1_inconsistent_constraints.sv', []],
['\/home\/eda\/Documents\/fifo\/sync_r2w.v', []],
['\/home\/eda\/Documents\/fifo\/sync_w2r.v', []],
['\/home\/eda\/Documents\/fifo\/wptr_full.v', []]
],
annotation_infos: [
],
annotation_strings: [
],
hits : []
};
VerissimoReport.loading();